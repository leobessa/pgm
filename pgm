#!/usr/bin/env ruby

class MatrixFactory
  def initialize(content)
    @data = {}
    @line_count = 0
    @col_count = 0
    content.each_line.each_with_index do |line,i|
      @line_count = i if @line_count < i
      line.split(" ").each_with_index do |v,j|
        @col_count = j if @col_count < j
        @data[{i: i, j: j}] = Integer(v)
      end
    end
  end
  def build
    Matrix.new(@data, @line_count, @col_count)
  end
end

class Matrix
  attr_reader :line_count, :col_count, :data
  def initialize(data, line_count, col_count)
    @data = data
    @line_count = line_count
    @col_count = col_count
  end
  
  def each_with_index
    0.upto(@line_count) do |i|
      0.upto(@col_count) do |j|
        yield @data[{i: i, j: j}], i, j
      end
    end
  end
  
  def to_s
    value = ""
    each_with_index do |v,i,j|
      value << @data[{i: i, j: j}].to_s
      if j == @col_count
        value << "\n"
      else
        value << " "
      end
    end
    value
  end

end

print "Digite o nome do arquivo de entrada:"
file_name = gets.chomp + ".pgm"
m = MatrixFactory.new(File.read(file_name)).build
puts """
Arquivo #{file_name} carregado com sucesso.
c - carga
t - exibicao na tela
n - negativo
r - rotacao
v - espelhamento vertical
h - espelhamento horizontal
x - corte
e - filtro da erosao
d - filtro da dilatacao
m - filtro da mediana
z - filtro da media
1 - filtro de bordas 1
2 - filtro de bordas 2
3 - filtro de bordas 3
g - gravacao
C - comparacao
a - ajuda
s - sair
"""

class Negative
  def initialize(m)
    @m = m
  end
  
  def build
    data = {}
    @m.each_with_index do |v,i,j|
      data[{i: i, j: j}] = 255 - v
    end
    Matrix.new(data, @m.line_count, @m.col_count)
  end
end

class VerticalMirrored
  def initialize(m)
    @m = m
  end
  
  def build
    data = {}
    @m.each_with_index do |v,i,j|
      new_j = @m.col_count - j
      data[{i: i, j: new_j}] = v
    end
    Matrix.new(data, @m.line_count, @m.col_count)
  end
end

class HorizontalMirrored
  def initialize(m)
    @m = m
  end
  
  def build
    data = {}
    @m.each_with_index do |v,i,j|
      new_i = @m.line_count - i
      data[{i: new_i, j: j}] = v
    end
    Matrix.new(data, @m.line_count, @m.col_count)
  end
end

class Rotation
  def initialize(m)
    @m = m
  end
  
  def build
    data = {}
    @m.each_with_index do |v,i,j|
      new_i = j
      new_j = @m.line_count - i
      data[{i: new_i, j: new_j}] = v
    end
    Matrix.new(data, @m.col_count, @m.line_count)
  end
end

class Cut
  def initialize(m)
    @m = m
  end
  
  def build(x_sup,y_sup,x_inf,y_inf)
    data = {}
    raise "Limites invalidos" if (x_inf > @m.line_count) || (y_inf > @m.col_count)
    @m.each_with_index do |v,i,j|
      if (x_sup..x_inf).include?(i) && (y_sup..y_inf).include?(j)
        new_i = i - x_sup
        new_j = j - y_sup
        data[{i: new_i, j: new_j}] = v
      end
    end
    Matrix.new(data, x_inf-x_sup, y_inf-y_sup)
  end
end

class Erosion
  def initialize(m)
    @m = m
  end
  
  def build(window_size)
    data = {}
    @m.each_with_index do |v,i,j|
      half_window_size = window_size.to_i / 2
      i_range = i-half_window_size .. i+half_window_size
      j_range = j-half_window_size .. j+half_window_size
      window_values = i_range.to_a.product(j_range.to_a).map do |xi,xj|
        @m.data.fetch({i: xi, j: xj},nil)
      end
      data[{i: i, j: j}] = window_values.compact.min
    end
    Matrix.new(data, @m.line_count, @m.col_count)
  end
end

begin
  print "Digite um comando:"
  command = gets
  puts unless command == "s\n"
  case command
  when "t\n"
    puts m.to_s
  when "n\n"
    m = Negative.new(m).build
    puts m.to_s
  when "h\n"
    m = HorizontalMirrored.new(m).build
    puts m.to_s
  when "v\n"
    m = VerticalMirrored.new(m).build
    puts m.to_s
  when "r\n"
    m = Rotation.new(m).build
    puts m.to_s
  when "x\n"
    begin
      m = Cut.new(m).build(gets.to_i,gets.to_i,gets.to_i,gets.to_i)
      puts m.to_s
    rescue Exception => e
      puts e
      puts
    end
  when "e\n"
    print "Digite o tamanho da janela:"
    window_size = Integer(gets)
    puts
    m = Erosion.new(m).build(window_size)
    puts m.to_s
  when "s\n"
    break
  end
end while command